<?xml version="1.0" encoding="UTF-8"?>
<jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="ax_sbt_dodat3_get_report_str_svern" pageWidth="2267" pageHeight="535" orientation="Landscape" whenNoDataType="AllSectionsNoDetail" columnWidth="2267" leftMargin="0" rightMargin="0" topMargin="0" bottomMargin="0" isIgnorePagination="true">
	<property name="ireport.scriptlethandling" value="2"/>
	<property name="ireport.encoding" value="UTF-8"/>
	<property name="ireport.zoom" value="1.0"/>
	<property name="ireport.x" value="0"/>
	<property name="ireport.y" value="0"/>
	<import value="net.sf.jasperreports.engine.*"/>
	<import value="java.util.*"/>
	<import value="net.sf.jasperreports.engine.data.*"/>
	<scriptlet name="mDaxScriptlet" class="com.ksoe.energynet.reports.common.mDaxScriptlet"/>
	<parameter name="Ppodrkod" class="java.lang.String" isForPrompting="false"/>
	<parameter name="Ppodr_name" class="java.lang.String" isForPrompting="false"/>
	<parameter name="pdate1" class="java.lang.String" isForPrompting="false"/>
	<parameter name="pdate2" class="java.lang.String"/>
	<parameter name="sumhoursotpusk" class="java.math.BigDecimal">
		<defaultValueExpression><![CDATA[$P{sumhoursotpusk} != null ? $P{sumhoursotpusk} : new BigDecimal(0)]]></defaultValueExpression>
	</parameter>
	<parameter name="fio_fin" class="java.lang.String"/>
	<parameter name="post_fin" class="java.lang.String" isForPrompting="false"/>
	<parameter name="tabn_fin" class="java.lang.String" isForPrompting="false"/>
	<parameter name="plankind" class="java.lang.Integer"/>
	<parameter name="p_countworkhours" class="java.math.BigDecimal"/>
	<queryString>
		<![CDATA[select period ,
      fio_worker ,
      name_position_fin ,
      name_position_plan ,
      brigada_work_name ,
      sum(coalesce(deliverytimefact , 0))::NUMERIC(15,2) as deliverytimefact ,
      sum(zamena_ustanovka_plan)::NUMERIC(15,2) as zamena_ustanovka_plan ,
      sum(zamena_ustanovka_notplan)::NUMERIC(15,2) as zamena_ustanovka_notplan,

      sum(obstejennya_plan)::NUMERIC(15,2) as obstejennya_plan,
      sum(obstejennya_notplan)::NUMERIC(15,2) as obstejennya_notplan,

      sum(tehproverka_plan)::NUMERIC(15,2) as tehproverka_plan,
      sum(tehproverka_notplan)::NUMERIC(15,2) as tehproverka_notplan,

      sum(otluchpodkl_plan)::NUMERIC(15,2) as otluchpodkl_plan,
      sum(otluchpodkl_notplan)::NUMERIC(15,2) as otluchpodkl_notplan,

      sum(kraja_plan)::NUMERIC(15,2) as kraja_plan,
      sum(kraja_notplan)::NUMERIC(15,2) as kraja_notplan,

      sum(other_work_plan)::NUMERIC(15,2) as  other_work_plan,
      sum(other_work_notplan)::NUMERIC(15,2) as other_work_notplan
      From (


select (select  case when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '01' then 'Січень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '02' then 'Лютий'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '03' then 'Березень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '04' then 'Квітень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '05' then 'Травень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '06' then 'Червень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '07' then 'Липень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '08' then 'Серпень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '09' then 'Вересень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '10' then 'Жовтень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '11' then 'Листопад'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '12' then 'Грудень'
            end  ) as period ,
 $P{fio_fin} as fio_worker ,  $P{post_fin} as name_position_fin  ,
baz_sum.name_position_plan ,
baz_sum.brigada_work_name ,
sum(deliverytimefact) as deliverytimefact ,

sum(zamena_ustanovka_plan) as zamena_ustanovka_plan ,
sum(zamena_ustanovka_notplan) as zamena_ustanovka_notplan,

sum(obstejennya_plan) as obstejennya_plan,
sum(obstejennya_notplan) as obstejennya_notplan,

sum(tehproverka_plan) as tehproverka_plan,
sum(tehproverka_notplan) as tehproverka_notplan,

sum(otluchpodkl_plan) as otluchpodkl_plan,
sum(otluchpodkl_notplan) as otluchpodkl_notplan,

sum(kraja_plan) as kraja_plan,
sum(kraja_notplan) as kraja_notplan,

sum(other_work_plan) as  other_work_plan,
sum(other_work_notplan) as other_work_notplan

From (
Select
baz_sel.fio_worker , baz_sel.positionname , baz_sel.name_position_plan ,
baz_sel.brigada_work_name ,
baz_sel.deliverytimefact,

case when formrefcode = 1 and classificationtypecode = 2140008868 then coalesce(countfact,0) else 0 end as zamena_ustanovka_plan ,
case when formrefcode = 2 and classificationtypecode = 2140008868 then coalesce(countfact,0) else 0 end as zamena_ustanovka_notplan ,

case when formrefcode = 1 and  ( classificationtypecode = 2140008867
                             and tktechcardcode <> 2017041451
                             and tktechcardcode <> 2017041454
                             and tktechcardcode <> 2017041456  ) then coalesce(countfact,0) else 0 end as obstejennya_plan ,
case when formrefcode = 2 and  ( classificationtypecode = 2140008867
                             and tktechcardcode <> 2017041451
                             and tktechcardcode <> 2017041454
                             and tktechcardcode <> 2017041456  ) then coalesce(countfact,0) else 0 end as obstejennya_notplan  ,

case when formrefcode = 1 and   ( classificationtypecode = 2140008867
                            and (tktechcardcode = 2017041451
                              or tktechcardcode = 2017041454
                              or tktechcardcode = 2017041456)  ) then coalesce(countfact,0) else 0 end as tehproverka_plan ,
case when formrefcode = 2 and   ( classificationtypecode = 2140008867
                            and (tktechcardcode = 2017041451
                              or tktechcardcode = 2017041454
                              or tktechcardcode = 2017041456)  ) then coalesce(countfact,0) else 0 end as tehproverka_notplan ,

case when formrefcode = 1 and classificationtypecode = 2140008869 then coalesce(countfact,0) else 0 end as otluchpodkl_plan,
case when formrefcode = 2 and classificationtypecode = 2140008869 then coalesce(countfact,0) else 0 end as otluchpodkl_notplan ,

case when formrefcode = 1  and classificationtypecode = 2140008870 then coalesce(countfact,0) else 0 end as kraja_plan,
case when formrefcode = 2  and classificationtypecode = 2140008870 then coalesce(countfact,0) else 0 end as kraja_notplan ,

case when formrefcode = 1 and classificationtypecode not in (2140008868,2140008867,2140008869,2140008870 ) then coalesce(countfact,0) else 0 end as other_work_plan ,
case when formrefcode = 2 and classificationtypecode not in (2140008868,2140008867,2140008869,2140008870 ) then coalesce(countfact,0) else 0 end as other_work_notplan

 From (
SELECT  enplanwork.code ,
        enhumenitem.countfact ,
        enplanwork.typerefcode as enp_typerefcode ,
        enplanwork.staterefcode ,
        finworker.name as fio_worker ,
        finworker.positionname ,
        tkposition.name||coalesce(trim(tkposition.rank),'') as name_position_plan ,
        finexecutor.name  as brigada_work_name ,
        sum( endeliverytime.deliverytimefact ) as deliverytimefact ,
        enhumenitem.code as humanitemcode  ,
        enplanwork.formrefcode ,
        tktechcard.code as tktechcardcode ,
        tktechcard.classificationtypecode

           from enhumenitem   left join endeliverytime on (endeliverytime.humenitemrefcode = enhumenitem.code  )
           , enplanworkitem , finworker , enplanwork
           , finexecutor ,  tkposition ,  tktechcard
                   Where enplanworkitem.kartarefcode =  tktechcard.code
                     and enhumenitem.planitemrefcode = enplanworkitem.code
                     and  enplanworkitem.planrefcode = enplanwork.code
                     and  coalesce(enhumenitem.countfact  , 0 ) <> 0
                     and  enhumenitem.finworkercode = finworker.code
                     and  enplanwork.finexecutorcode =  finexecutor.code
                     and  enplanwork.datestart between to_date($P{pdate1}, 'dd.mm.yyyy') and to_date($P{pdate2},'dd.mm.yyyy')
                     and  enplanwork.statuscode NOT IN (2,6)
                     and  enplanwork.kindcode = $P{plankind}
                     and  enplanworkitem.countgen <> 0
                     and  finworker.tabnumber::integer = $P!{tabn_fin}
                     and  enhumenitem.positiongencode = tkposition.code

                     /*AND finworker.departmentcode IN(
					    SELECT q.fkorgid  FROM axorgid2fkorgid q  WHERE q.axorgid = P{Ppodrkod}
					    UNION ALL
					    SELECT  P{Ppodrkod} )*/

					    and finworker.kindrefcode = 2 /*Енергозбутовий  персонал*/

group by enplanwork.code ,
        enhumenitem.countfact ,
        enplanwork.typerefcode ,
        enplanwork.staterefcode ,
        finworker.name ,
        finworker.positionname ,
        tkposition.name||coalesce(trim(tkposition.rank),'') ,
        finexecutor.name   ,
        enhumenitem.code   ,
        enplanwork.formrefcode ,
        tktechcard.code  ,
        tktechcard.classificationtypecode

) baz_sel
) baz_sum
group by baz_sum.fio_worker , baz_sum.positionname , baz_sum.name_position_plan ,
baz_sum.brigada_work_name



UNION
select
(select  case when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '01' then 'Січень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '02' then 'Лютий'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '03' then 'Березень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '04' then 'Квітень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '05' then 'Травень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '06' then 'Червень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '07' then 'Липень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '08' then 'Серпень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '09' then 'Вересень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '10' then 'Жовтень'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '11' then 'Листопад'
              when to_char(to_date($P{pdate2},'dd.mm.yyyy'),'mm') = '12' then 'Грудень'
            end  ) as period  ,
 $P{fio_fin} as fio_worker , $P{post_fin} as name_position_fin  ,
'' as name_position_plan ,
'' as brigada_work_name ,
0  as deliverytimefact ,

0 as zamena_ustanovka_plan ,
0 as zamena_ustanovka_notplan,

0 as obstejennya_plan,
0 as obstejennya_notplan,

0 as tehproverka_plan,
0 as tehproverka_notplan,

0 as otluchpodkl_plan,
0 as otluchpodkl_notplan,

0 as kraja_plan,
0 as kraja_notplan,

0 as  other_work_plan,
0 as other_work_notplan
  where not exists ( select * from
             enhumenitem , finworker , enplanwork
                   Where  enhumenitem.planrefcode = enplanwork.code
                     and  coalesce(enhumenitem.countfact  , 0 ) <> 0
                     and  enhumenitem.finworkercode = finworker.code
                     and  enplanwork.datestart between to_date($P{pdate1} , 'dd.mm.yyyy') and to_date($P{pdate2},'dd.mm.yyyy')
                     and  enplanwork.statuscode NOT IN (2,6)
                     and  enplanwork.kindcode = $P{plankind}
                     and  finworker.tabnumber::integer = $P!{tabn_fin}
               )
) sel_zag
Group by period , fio_worker , name_position_fin , brigada_work_name , name_position_plan
Order by fio_worker , name_position_fin , brigada_work_name , name_position_plan]]>
	</queryString>
	<field name="period" class="java.lang.String"/>
	<field name="zamena_ustanovka_plan" class="java.math.BigDecimal"/>
	<field name="zamena_ustanovka_notplan" class="java.math.BigDecimal"/>
	<field name="obstejennya_plan" class="java.math.BigDecimal"/>
	<field name="obstejennya_notplan" class="java.math.BigDecimal"/>
	<field name="tehproverka_plan" class="java.math.BigDecimal"/>
	<field name="tehproverka_notplan" class="java.math.BigDecimal"/>
	<field name="otluchpodkl_plan" class="java.math.BigDecimal"/>
	<field name="otluchpodkl_notplan" class="java.math.BigDecimal"/>
	<field name="kraja_plan" class="java.math.BigDecimal"/>
	<field name="kraja_notplan" class="java.math.BigDecimal"/>
	<field name="other_work_plan" class="java.math.BigDecimal"/>
	<field name="other_work_notplan" class="java.math.BigDecimal"/>
	<field name="name_position_plan" class="java.lang.String"/>
	<field name="brigada_work_name" class="java.lang.String"/>
	<field name="deliverytimefact" class="java.math.BigDecimal"/>
	<variable name="v_count_personal" class="java.math.BigDecimal">
		<variableExpression><![CDATA[new BigDecimal(1)]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(1)]]></initialValueExpression>
	</variable>
	<variable name="v_countworkhours" class="java.math.BigDecimal">
		<variableExpression><![CDATA[$P{p_countworkhours}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="v_counthoursotpusk" class="java.math.BigDecimal">
		<variableExpression><![CDATA[$P{sumhoursotpusk}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="var_col34" class="java.math.BigDecimal">
		<variableExpression><![CDATA[]]></variableExpression>
	</variable>
	<variable name="var_col6" class="java.math.BigDecimal">
		<variableExpression><![CDATA[( $V{v_count_personal}.
    doubleValue() != 0.0 )
? ( ($V{v_countworkhours}.multiply($V{v_count_personal}))
    .setScale(2, java.math.BigDecimal.ROUND_HALF_UP)
    .subtract($P{sumhoursotpusk}) ) : new BigDecimal(0)]]></variableExpression>
	</variable>
	<variable name="sum_col_5" class="java.math.BigDecimal" incrementType="Group" incrementGroup="rr" calculation="Sum">
		<variableExpression><![CDATA[$P{sumhoursotpusk}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="sum_col_6" class="java.math.BigDecimal" incrementType="Group" incrementGroup="rr" calculation="Sum">
		<variableExpression><![CDATA[( $V{v_count_personal}.doubleValue() != 0.0 )
? ( ($V{v_countworkhours}.
    multiply($V{v_count_personal})).
setScale(2, java.math.BigDecimal.ROUND_HALF_UP).
subtract($P{sumhoursotpusk}) ) : new BigDecimal(0)]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="itogo_fio_otpusk" class="java.math.BigDecimal" calculation="First">
		<variableExpression><![CDATA[$P{sumhoursotpusk}]]></variableExpression>
	</variable>
	<variable name="zamena_ustanovka_plan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{zamena_ustanovka_plan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="zamena_ustanovka_notplan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{zamena_ustanovka_notplan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="obstejennya_plan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{obstejennya_plan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="obstejennya_notplan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{obstejennya_notplan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="tehproverka_plan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{tehproverka_plan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="tehproverka_notplan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{tehproverka_notplan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="otluchpodkl_plan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{otluchpodkl_plan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="otluchpodkl_notplan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{otluchpodkl_notplan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="kraja_plan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{kraja_plan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="kraja_notplan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{kraja_notplan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="other_work_plan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{other_work_plan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="other_work_notplan" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{other_work_notplan}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="var_deliverytime" class="java.math.BigDecimal" calculation="Sum">
		<variableExpression><![CDATA[$F{deliverytimefact}]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="var_workwithpersonal" class="java.math.BigDecimal">
		<variableExpression><![CDATA[$V{v_count_personal}.doubleValue() != 0.0 ?
(( ($V{v_countworkhours}.
    multiply($V{v_count_personal})).setScale(2, java.math.BigDecimal.ROUND_HALF_UP).
 subtract($V{v_counthoursotpusk}))
.multiply(new BigDecimal(0.05))).
setScale(2, java.math.BigDecimal.ROUND_HALF_UP) : new BigDecimal(0)]]></variableExpression>
		<initialValueExpression><![CDATA[new BigDecimal(0)]]></initialValueExpression>
	</variable>
	<variable name="period" class="java.lang.String" calculation="First"/>
	<group name="rr">
		<groupExpression><![CDATA[$P{fio_fin}]]></groupExpression>
		<groupHeader>
			<band splitType="Stretch"/>
		</groupHeader>
		<groupFooter>
			<band splitType="Stretch"/>
		</groupFooter>
	</group>
	<group name="zatr_hours">
		<groupExpression><![CDATA[$P{fio_fin}+ $P{post_fin}+$F{name_position_plan}+$F{brigada_work_name}]]></groupExpression>
		<groupHeader>
			<band splitType="Stretch"/>
		</groupHeader>
		<groupFooter>
			<band splitType="Stretch"/>
		</groupFooter>
	</group>
	<group name="gr_podr">
		<groupExpression><![CDATA[$P{Ppodrkod}]]></groupExpression>
		<groupHeader>
			<band splitType="Stretch"/>
		</groupHeader>
		<groupFooter>
			<band splitType="Stretch"/>
		</groupFooter>
	</group>
	<background>
		<band splitType="Stretch"/>
	</background>
	<title>
		<band splitType="Stretch"/>
	</title>
	<pageHeader>
		<band splitType="Stretch"/>
	</pageHeader>
	<columnHeader>
		<band splitType="Stretch"/>
	</columnHeader>
	<detail>
		<band splitType="Stretch"/>
	</detail>
	<columnFooter>
		<band splitType="Stretch"/>
	</columnFooter>
	<pageFooter>
		<band splitType="Stretch"/>
	</pageFooter>
	<summary>
		<band splitType="Stretch"/>
	</summary>
</jasperReport>
